{"version":3,"sources":["serviceWorker.ts","store/actions.ts","store/state.ts","utilities/switchcase.ts","store/reducers.ts","hooks/use-state-context.ts","components/App.tsx","styles-global.ts","index.tsx"],"names":["ActionType","Boolean","window","location","hostname","match","initialState","color","showActualTemp","switchcase","value","cases","defaultCase","valueString","String","result","state","action","type","SetColor","ToggleShowActualTemp","StateContext","createContext","App","useContext","dispatch","useEffect","styles","css","GlobalStyles","e","Global","render","reducer","initialValue","init","children","createElement","Provider","useReducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8IAYA,ICZYA,EDaQC,QAAqC,cAA7BC,OAAOC,SAASC,UAER,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MALV,4D,SCZVL,K,oBAAAA,E,6CAAAA,M,KAsBL,ICZMM,EALkB,CAC7BC,MAAO,UACPC,gBAAgB,G,OCJLC,EAAa,SACxBC,EACAC,EACAC,GAEA,IAAMC,EAAcC,OAAOJ,GACrBK,EAASF,KAAeF,EAC1BA,EAAME,GACND,EACJ,MAAyB,oBAAXG,EAAyBA,IAAwBA,GCT3DR,EAAQ,SACZS,EACAC,GAFY,OAGOR,EACnBQ,EAAOC,KADsB,eAE3BlB,EAAWmB,UAAW,kBAAOF,EAA6BP,SAC5DM,IAGIR,EAAiB,SACrBQ,EACAC,GAFqB,OAGOR,EAC5BQ,EAAOC,KAD+B,eAEpClB,EAAWoB,sBAAuB,kBAAOJ,KAC3CA,I,8BCdIK,G,KACJC,wBAAsD,OCUzCC,G,UARI,WAAU,IAAD,EDqBvBC,qBAAWH,GCrBY,mBACnBL,EADmB,KACZS,EADY,KAK1B,OAHAC,qBAAU,WLaY,IAACnB,EKZrBkB,GLYqBlB,EKZH,ULYyC,CAC7DW,KAAMlB,EAAWmB,SACjBT,MAAOH,OKbJ,CAACkB,IACG,uBAAMT,EAAMT,S,w/FCRrB,IAAMoB,EAASC,YAAH,KAsDGC,EADM,kBAASC,wBAAEC,IAAQ,CAACJ,Y,QCjDzCK,iBAEI,mBHIgC,SAAC,GAAD,IAClCC,EADkC,EAClCA,QACAC,EAFkC,EAElCA,aAFkC,IAGlCC,YAHkC,MAG3B,kBAAaD,GAHc,EAIlCE,EAJkC,EAIlCA,SAJkC,OAKCC,wBACnChB,EAAaiB,SACb,CAAC5B,MAAO6B,qBAAWN,EAASC,EAAcC,IAC1CC,KGZE,CAAsBH,QJWH,SAACjB,EAAcC,GAAf,MAA0C,CAC/DV,MAAOA,EAAMS,EAAMT,MAAOU,GAC1BT,eAAgBA,EAAeQ,EAAMR,eAAgBS,KIbXiB,aAAc5B,GACpD,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGJkC,SAASC,eAAe,SRuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f12693fe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst hostnameRegex = /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/u;\nconst isLocalhost = Boolean(window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(hostnameRegex));\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport const register = (config?: Config): void => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still\n        // exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      }\n      else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nconst registerValidSW = (swUrl: string, config?: Config): void => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            }\n            else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config): void => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {headers: {'Service-Worker': 'script'}})\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      const notFound = 404;\n      if (\n        response.status === notFound\n        || (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      }\n      else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n};\n\nexport const unregister = (): void => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n};\n","export enum ActionType {\n  SetColor = 'SetColor',\n  ToggleShowActualTemp = 'ToggleShowActualTemp',\n}\n\n// export type Action<T = undefined> = T extends undefined\n//   ? {type: ActionType}\n//   : {\n//     type: ActionType;\n//     value: T;\n//   };\n\ntype ActionValueUndefined = {type: ActionType};\nexport type ActionValueString = {\n  type: ActionType;\n  value: string;\n};\n\nexport type Action =\n  | ActionValueString\n  | ActionValueUndefined;\n\nexport const setColor = (color: string): ActionValueString => ({\n  type: ActionType.SetColor,\n  value: color,\n});\n\nexport const toggleShowActualTemp =\n  (): ActionValueUndefined => ({type: ActionType.ToggleShowActualTemp});\n","export type State = {\n  color: string;\n  showActualTemp: boolean;\n};\n\nconst newState = (): State => ({\n  color: '#000000',\n  showActualTemp: false,\n});\n\nexport const initialState = newState();\n","type Case<T> = T | (() => T);\ntype Cases<T> = {[key: string]: Case<T>};\n\nexport const switchcase = <T>(\n  value: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n  cases: Cases<T>,\n  defaultCase?: Case<T>,\n): T => {\n  const valueString = String(value);\n  const result = valueString in cases\n    ? cases[valueString]\n    : defaultCase;\n  return typeof result === 'function' ? (result as Function)() : result;\n};\n","import {Action, ActionType, ActionValueString, State} from '../store';\nimport {switchcase} from '../utilities';\n\nconst color = (\n  state: State['color'],\n  action: Action,\n): State['color'] => switchcase(\n  action.type,\n  {[ActionType.SetColor]: () => (action as ActionValueString).value},\n  state,\n);\n\nconst showActualTemp = (\n  state: State['showActualTemp'],\n  action: Action,\n): State['showActualTemp'] => switchcase(\n  action.type,\n  {[ActionType.ToggleShowActualTemp]: () => !state},\n  state,\n);\n\nexport const reducer = (state: State, action: Action): State => ({\n  color: color(state.color, action),\n  showActualTemp: showActualTemp(state.showActualTemp, action),\n});\n","import {Action, State} from '../store';\nimport {createContext, createElement, useContext, useReducer} from 'react';\nimport {E} from '../types';\n\nconst StateContext =\n  createContext<[State, React.Dispatch<Action>] | null>(null);\n\ntype TStateContextProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  initialValue: State;\n  init?: () => State;\n  children: React.ReactNode[];\n};\n\nexport const StateContextProvider = ({\n  reducer,\n  initialValue,\n  init = (): State => initialValue,\n  children,\n}: TStateContextProviderProps): E => createElement(\n  StateContext.Provider,\n  {value: useReducer(reducer, initialValue, init)},\n  children,\n);\n\nexport const useStateContext = (): [\n  State,\n  React.Dispatch<Action>,\n] => useContext(StateContext) as [State, React.Dispatch<Action>];\n","/** @jsx jsx */\nimport {E} from '../types';\nimport {jsx} from '@emotion/core';\nimport {setColor} from '../store';\nimport {useEffect} from 'react';\nimport {useStateContext} from '../hooks';\n\nexport const App = (): E => {\n  const [state, dispatch] = useStateContext();\n  useEffect(() => {\n    dispatch(setColor('#ff0000'));\n  }, [dispatch]);\n  return <div>{state.color}</div>;\n};\n\nexport default App;\n","import {css, Global} from '@emotion/core';\nimport {createElement as e} from 'react';\nimport {E} from './types';\n\nconst styles = css`\n  /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\n\n  /*! Modifications to normalize */\n\n  *,\n  *::before,\n  *::after {\n    border: 0;\n    box-sizing: inherit;\n    font-weight: normal;\n    margin: 0;\n    padding: 0;\n  }\n\n  html {\n    box-sizing: border-box;\n    font-size: 16px;\n  }\n\n  body {\n    font-family: sans-serif;\n  }\n\n  /*! End modifications to normalize */\n\n  @import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,700|Roboto+Mono|Roboto:400,700&display=swap&subset=latin-ext');\n  @import url('https://fonts.googleapis.com/icon?family=Material+Icons');\n\n  :root {\n    --color-bg--dark: hsl(210, 10%, 15%);\n    --color-fg--dark: hsl(0, 0%, 85%);\n    --color-bg--light: hsl(0, 0%, 100%);\n    --color-fg--light: hsl(0, 0%, 0%);\n    --color-accent: hsl(210, 100%, 50%);\n    --font-mono: 'Roboto Mono', monospace;\n    /* --font-sans: 'Roboto', sans-serif; */\n    --font-sans: 'Nunito Sans', sans-serif;\n  }\n\n  body {\n    --color-bg: var(--color-bg--dark);\n    --color-fg: var(--color-fg--dark);\n    background-color: var(--color-bg);\n    color: var(--color-fg);\n    font-family: var(--font-sans);\n  }\n\n  code {\n    font-family: var(--font-mono);\n  }\n`;\n\nconst GlobalStyles = (): E => e(Global, {styles});\nexport default GlobalStyles;\n","import * as serviceWorker from './serviceWorker';\nimport {initialState, reducer} from './store';\nimport App from './components/App';\nimport GlobalStyles from './styles-global';\nimport React from 'react';\nimport {render} from 'react-dom';\nimport {StateContextProvider} from './hooks';\n\nrender(\n  (\n    <StateContextProvider reducer={reducer} initialValue={initialState}>\n      <GlobalStyles />\n      <App />\n    </StateContextProvider>\n  ),\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}