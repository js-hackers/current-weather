{"version":3,"sources":["serviceWorker.ts","components/JSONData.tsx","components/DataWithTitle.tsx","components/CurrentWeatherData.tsx","hooks/use-weather.ts","components/ForecastWeatherData.tsx","components/App.tsx","styles-global.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","JSONData","memo","props","styles","component","css","JSON","stringify","data","DataWithTitle","title","CurrentWeatherData","latitude","longitude","useState","setData","error","setError","isLoading","setIsLoading","useEffect","a","queryString","fetch","response","ok","Object","assign","Error","message","name","json","useCurrent","ForecastWeatherData","useForecast","App","GlobalStyles","e","Global","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.38cd25d0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst hostnameRegex = /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/u;\nconst isLocalhost = Boolean(window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(hostnameRegex));\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport const register = (config?: Config): void => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still\n        // exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      }\n      else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nconst registerValidSW = (swUrl: string, config?: Config): void => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            }\n            else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config): void => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {headers: {'Service-Worker': 'script'}})\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      const notFound = 404;\n      if (\n        response.status === notFound\n        || (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      }\n      else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n};\n\nexport const unregister = (): void => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n};\n","/** @jsx jsx */\nimport {css, jsx, SerializedStyles} from '@emotion/core';\nimport {memo} from 'react';\n\nexport type JsonPrimitive = boolean | null | number | string;\nexport type JsonArray = Array<JsonData>;\nexport type JsonObject = { [prop: string]: JsonData };\nexport type JsonData = JsonArray | JsonObject | JsonPrimitive;\n\ntype Props = {data: JsonData};\n\nexport const JSONData: React.FC<Props> = memo(props => {\n  const styles: {[key: string]: SerializedStyles} = {};\n  styles.component = css`\n    background-color: hsla(0, 0%, 50%, 0.15);\n    border-radius: 0.25em;\n    overflow: auto;\n    padding: 1rem;\n  `;\n\n  const stringifyIndent = 2;\n\n  return (\n    <pre css={styles.component}>\n      <code>{JSON.stringify(props.data, null, stringifyIndent)}</code>\n    </pre>\n  );\n});\n\nexport default JSONData;\n","/** @jsx jsx */\nimport {css, jsx, SerializedStyles} from '@emotion/core';\nimport JSONData, {JsonData} from './JSONData';\nimport {memo} from 'react';\n\ntype Props = {\n  data: JsonData;\n  title: string;\n};\n\nexport const DataWithTitle: React.FC<Props> = memo(props => {\n  const styles: {[key: string]: SerializedStyles} = {};\n  styles.component = css`\n    margin: 4rem 1rem;\n  `;\n  styles.title = css`\n    margin-bottom: 2rem;\n  `;\n\n  return (\n    <div css={styles.component}>\n      {props.title\n        ? <h2 css={styles.title}>{props.title}</h2>\n        : null}\n      <JSONData data={props.data} />\n    </div>\n  );\n});\n\nexport default DataWithTitle;\n","/** @jsx jsx */\nimport DataWithTitle from './DataWithTitle';\nimport {jsx} from '@emotion/core';\nimport {useCurrent} from '../hooks/use-weather';\n\nexport const CurrentWeatherData: React.FC = () => {\n  const {data, error, isLoading} = useCurrent();\n\n  if (isLoading) return <p>Loading...</p>;\n  if (error) return <p>{error.message}</p>;\n  return <DataWithTitle data={data} title='Current Weather Data' />;\n};\n\nexport default CurrentWeatherData;\n","import {CurrentWeatherData, ForecastWeatherData} from '../shared-types';\nimport {useEffect, useState} from 'react';\n\nexport const useCurrent = (latitude?: number, longitude?: number): {\n  data: CurrentWeatherData | null;\n  error: Error | null;\n  isLoading: boolean;\n} => {\n  const [data, setData] = useState<CurrentWeatherData | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setData(null);\n    setError(null);\n    (async (): Promise<void> => {\n      try {\n        const baseUrl = 'https://weather-api.js-hackers.now.sh/current';\n        const queryString = (\n          typeof latitude === 'number'\n          && typeof longitude === 'number'\n        )\n          ? `?lat=${latitude}&lon=${longitude}`\n          : '';\n        const response = await fetch(`${baseUrl}${queryString}`);\n        if (!response.ok) {\n          throw Object.assign(new Error(), {\n            message: 'Fetch response not OK',\n            name: 'FetchError',\n            response,\n          });\n        }\n        setData(await response.json());\n      }\n      catch (err) {\n        setError(err);\n      }\n      finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [latitude, longitude]);\n\n  return {data, error, isLoading};\n};\n\nexport const useForecast = (latitude?: number, longitude?: number): {\n  data: ForecastWeatherData | null;\n  error: Error | null;\n  isLoading: boolean;\n} => {\n  const [data, setData] = useState<ForecastWeatherData | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setData(null);\n    setError(null);\n    (async (): Promise<void> => {\n      try {\n        const baseUrl = 'https://weather-api.js-hackers.now.sh/forecast';\n        const queryString = (\n          typeof latitude === 'number'\n          && typeof longitude === 'number'\n        )\n          ? `?lat=${latitude}&lon=${longitude}`\n          : '';\n        const response = await fetch(`${baseUrl}${queryString}`);\n        if (!response.ok) {\n          throw Object.assign(new Error(), {\n            message: 'Fetch response not OK',\n            name: 'FetchError',\n            response,\n          });\n        }\n        setData(await response.json());\n      }\n      catch (err) {\n        setError(err);\n      }\n      finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [latitude, longitude]);\n\n  return {data, error, isLoading};\n};\n","/** @jsx jsx */\nimport DataWithTitle from './DataWithTitle';\nimport {jsx} from '@emotion/core';\nimport {useForecast} from '../hooks/use-weather';\n\nexport const ForecastWeatherData: React.FC = () => {\n  const {data, error, isLoading} = useForecast();\n\n  if (isLoading) return <p>Loading...</p>;\n  if (error) return <p>{error.message}</p>;\n  return <DataWithTitle data={data} title='Forecasted Weather Data' />;\n};\n\nexport default ForecastWeatherData;\n","/** @jsx jsx */\nimport CurrentWeatherData from './CurrentWeatherData';\nimport ForecastWeatherData from './ForecastWeatherData';\nimport {jsx} from '@emotion/core';\n\nexport const App: React.FC = () => (\n  <div>\n    <CurrentWeatherData />\n    <ForecastWeatherData />\n  </div>\n);\n\nexport default App;\n","import {css, Global} from '@emotion/core';\nimport {createElement as e} from 'react';\n\nconst styles = css`\n  /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\n\n  /*! Modifications to normalize */\n\n  *,\n  *::before,\n  *::after {\n    border: 0;\n    box-sizing: inherit;\n    font-weight: normal;\n    margin: 0;\n    padding: 0;\n  }\n\n  html {\n    box-sizing: border-box;\n    font-size: 16px;\n  }\n\n  body {\n    font-family: sans-serif;\n  }\n\n  /*! End modifications to normalize */\n\n  @import url('https://fonts.googleapis.com/css?family=Roboto+Mono|Roboto:400,700&display=swap&subset=latin-ext');\n  @import url('https://fonts.googleapis.com/icon?family=Material+Icons');\n\n  :root {\n    --color-bg--dark: hsl(210, 10%, 15%);\n    --color-fg--dark: hsl(0, 0%, 85%);\n    --color-bg--light: hsl(0, 0%, 100%);\n    --color-fg--light: hsl(0, 0%, 0%);\n    --color-accent: hsl(210, 100%, 50%);\n    --font-mono: 'Roboto Mono', monospace;\n    --font-sans: 'Roboto', sans-serif;\n  }\n\n  body {\n    --color-bg: var(--color-bg--dark);\n    --color-fg: var(--color-fg--dark);\n    background-color: var(--color-bg);\n    color: var(--color-fg);\n    font-family: var(--font-sans);\n  }\n\n  code {\n    font-family: var(--font-mono);\n  }\n`;\n\nconst GlobalStyles: React.FC = () => e(Global, {styles});\nexport default GlobalStyles;\n","import * as serviceWorker from './serviceWorker';\nimport React, {Fragment} from 'react';\nimport App from './components/App';\nimport GlobalStyles from './styles-global';\nimport {render} from 'react-dom';\n\nrender(\n  (\n    <Fragment>\n      <GlobalStyles />\n      <App />\n    </Fragment>\n  ),\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}